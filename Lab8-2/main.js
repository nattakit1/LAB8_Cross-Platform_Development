const { app, BrowserWindow, ipcMain } = require('electron');
const path = require('path');
const fs = require('fs').promises;

let mainWindow;

function createWindow() {
    console.log('üñ•Ô∏è [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á window...');

    mainWindow = new BrowserWindow({
        width: 1000,
        height: 900,
        webPreferences: {
            nodeIntegration: false,      // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
            contextIsolation: true,      // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢  
            preload: path.join(__dirname, 'preload.js')  // ‚úÖ ‡πÉ‡∏ä‡πâ preload
        }
    });

    mainWindow.loadFile('index.html');

    // ‡πÄ‡∏õ‡∏¥‡∏î DevTools ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π console
    mainWindow.webContents.openDevTools();

    console.log('‚úÖ [MAIN] ‡∏™‡∏£‡πâ‡∏≤‡∏á window ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
}

// üì® Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
ipcMain.handle('send-message', (event, message) => {
    console.log('üì® [MAIN] ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°:', message);

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    const response = {
        original: message,
        reply: `Server ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: "${message}"`,
        timestamp: new Date().toISOString(),
        status: 'success'
    };

    console.log('üì§ [MAIN] ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö:', response);
    return response;
});

// üëã Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢
ipcMain.handle('say-hello', (event, name) => {
    console.log('üëã [MAIN] ‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Å‡∏±‡∏ö:', name);

    const greetings = [
        `‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${name}! ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Agent Wallboard`,
        `‡∏´‡∏ß‡∏±‡∏î‡∏î‡∏µ ${name}! ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á?`,
        `Hello ${name}! ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ô‡∏∞`,
    ];

    const randomGreeting = greetings[Math.floor(Math.random() * greetings.length)];

    return {
        greeting: randomGreeting,
        name: name,
        time: new Date().toLocaleString('th-TH'),
        agentCount: 3  // ‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô agents ‡∏ó‡∏µ‡πà online
    };
});

console.log('üîß [MAIN] IPC Handlers ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');

// üìä Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
ipcMain.handle('get-agents', async () => {
    console.log('üìä [MAIN] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents...');

    try {
        // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents
        const data = await fs.readFile('agent-data.json', 'utf8');
        const agentData = JSON.parse(data);

        console.log('‚úÖ [MAIN] ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• agents ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        return {
            success: true,
            data: agentData,
            timestamp: new Date().toISOString()
        };

    } catch (error) {
        console.error('‚ùå [MAIN] Error ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error);
        return {
            success: false,
            error: error.message
        };
    }
});

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö authentication
ipcMain.handle('authenticate', async (event, { agentId, password }) => {
    const credRaw = await fs.readFile(path.join(__dirname, 'credentials.json'), 'utf8');
    const credentials = JSON.parse(credRaw);

    if (credentials[agentId] && credentials[agentId] === password) {
        const dataRaw = await fs.readFile(path.join(__dirname, 'agent-data.json'), 'utf8');
        const agentData = JSON.parse(dataRaw);
        const agent = agentData.agents.find(a => a.id === agentId);
        return { success: true, agent, message: 'Authenticated' };
    }
    return { success: false, error: 'Invalid credentials' };
});

// üîÑ Handler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ agent
// ‚úÖ ‡πÅ‡∏Å‡πâ change-agent-status ‡πÉ‡∏´‡πâ broadcast ‡∏Å‡∏•‡∏±‡∏ö renderer
ipcMain.handle('change-agent-status', async (event, { agentId, newStatus }) => {
    const filePath = path.join(__dirname, 'agent-data.json');
    const dataRaw = await fs.readFile(filePath, 'utf8');
    const agentData = JSON.parse(dataRaw);

    const agent = agentData.agents.find(a => a.id === agentId);
    agent.status = newStatus;
    agent.lastStatusChange = new Date().toISOString();

    await fs.writeFile(filePath, JSON.stringify(agentData, null, 2));

    // ‚úÖ ‡∏™‡πà‡∏á event ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á renderer
    BrowserWindow.getAllWindows().forEach(win => {
        win.webContents.send('agent-status-updated', { agent, statistics: agentData.statistics });
    });

    return { success: true, agent, message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß` };
});

app.whenReady().then(() => {
    console.log('‚ö° [MAIN] Electron ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
    createWindow();
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }

ipcMain.handle('change-agent-status', async (event, { agentId, newStatus }) => {
    const filePath = path.join(__dirname, 'agent-data.json');
    const dataRaw = await fs.readFile(filePath, 'utf8');
    const agentData = JSON.parse(dataRaw);

    const agent = agentData.agents.find(a => a.id === agentId);
    agent.status = newStatus;
    agent.lastStatusChange = new Date().toISOString();

    await fs.writeFile(filePath, JSON.stringify(agentData, null, 2));

    // ‡∏™‡πà‡∏á event ‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏∏‡∏Å window (Notification)
    BrowserWindow.getAllWindows().forEach(win => {
        win.webContents.send('agent-status-updated', { agent, statistics: agentData.statistics });
    });

    return { success: true, agent, message: `‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô ${newStatus} ‡πÅ‡∏•‡πâ‡∏ß`, statistics: agentData.statistics };
});


});